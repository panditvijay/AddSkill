Problem statement:
-------------------------------------
Given an array of size 2 * N integers. Divide the array into N pairs, such that the maximum pair sum is minimized. 

Input : N = 2
arr[] = { 5, 8, 3, 9 }
Output : (3, 9) (5, 8)
Explanation:
Possible pairs are :
1. (8, 9) (3, 5) Maximum Sum of a Pair = 17
2. (5, 9) (3, 8) Maximum Sum of a Pair = 14
3. (3, 9) (5, 8) Maximum Sum of a Pair = 13
Thus, in case 3, the maximum pair sum is minimum of all the other cases. Hence, the answer is 13.
------------------------------------------------------



Brute force approach - O(n^3) time & O(N^2) space
-----------------------------
1. Generate all the pairs of indexes from a given array A and store in an array, say B
2. Create an array "vst" size of A to check which pair we have already visited.
3. Iterate from every index of B and mark as visited and check for all non-visited.





#include<bits/stdc++.h>

using namespace std;


int main(){


	int n;
    cin>>n;
    
    vector<int> v;
    
    for(int i=0;i<2*n;i++){
        int val;
        cin>>val;
        
        v.push_back(val);
    }
    
    
    
    vector<pair<int,int>> vpr;
    
    for(int i=0;i<2*n;i++){
        for(int j=i+1;j<2*n;j++){
            
            vpr.push_back(make_pair(i,j));
           //cout<<i<<" "<<j<<";";
        }
    }
    
    int gmx=INT_MAX;
    
    for(int i=0;i<2*n-1;i++){
        
        vector<bool> vst(2*n);
        
        int f1=vpr[i].first;
            int f2=vpr[i].second;
        
        int lms=(v[f1]+v[f2]);
        
            vst[f1]=true;
            vst[f2]=true;
        cout<<"("<<v[f1]<<" "<<v[f2]<<") ";
        for(int j=i+1;j<vpr.size();j++){
            int s1=vpr[j].first;
            int s2=vpr[j].second;
            
            if(!vst[s1] && !vst[s2]){
                cout<<"("<<v[s1]<<" "<<v[s2]<<") ";
                
                if(v[s1]+v[s2]>lms){
                    lms=v[s1]+v[s2];
                }
                
                vst[s1]=true;
                vst[s2]=true;
            }
            
        }
        cout<<"max here :"<<lms;
        
        if(lms<gmx){
            gmx=lms;
        }
        //vst.clear();
        cout<<endl;
    }
    
    cout<<"maximum pair sum min. is "<<gmx;
    

	return 0;
}



Input
----------------------------
3
9 6 5 1 2 3


Output:
-------------
(9 6) (5 1) (2 3) max here :15
(9 5) (6 1) (2 3) max here :14
(9 1) (6 5) (2 3) max here :11
(9 2) (6 5) (1 3) max here :11
(9 3) (6 5) (1 2) max here :12
maximum pair sum min. is 11
