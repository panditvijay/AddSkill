Range Minimum Query
-----------------------------------------

Good Read :https://www.hackerearth.com/practice/data-structures/advanced-data-structures/segment-trees/tutorial/
Img:http://i.imgur.com/GGBmcEP.png

/* Below implementation of segment Tree with Update & Query both O(logN); 
   Its a 0 based index implementation where Query is [a,b) - a is included while b is not.

*/
------------------------------------------------------------------------------



/* Author : A110011 - 00:19 */

#include<bits/stdc++.h>

using namespace std;



void build(vector<int> &t,int n) {  /* build the tree*/
  for (int i = n - 1; i > 0; --i) t[i] = min(t[i<<1],t[i<<1|1]); /* t[i]=min(t[2*i],t[2*i+1])*/
}

void modify(vector<int> &t,int n,int p, int value) {  // set value at position p
  for (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = min(t[p] , t[p^1]); /* Updating index with value and moving up(p>>1) and calculating min of its children.
}

int query(vector<int> &t,int n,int l, int r) {  // sum on interval [l, r)
  int res = INT_MAX;
    
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = min(res,t[l++]);  /* If left is ODD i.e its the right child hence calculating min.*/
    if (r&1) res = min(res,t[--r]); /*  If right is EVEN(since right most we are not considering so its an ODD) i.e its the left child hence calculating min.*/ 
  }
  return res;
}




int main(){

	// For fast I/O.
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    int n,q;
    cin>>n>>q;
    
    vector<int> t(2*n);
    
    for(int i=n;i<2*n;i++){
        int val;
        cin>>val;
        t[i]=val;
    }
    
    build(t,n);
    
    
    
    while(q--){
        int l,r;
        char ch;
        
        cin>>ch>>l>>r;
        
        if(ch=='q'){
            cout<<query(t,n,l-1,r)<<endl;
        }else{
            modify(t,n,l-1,r);
        }
    }


return 0; 
}


Input:
---------------
5 5   /* No. of value and No. query ( update & range)
1 5 2 4 3
q 1 5  /*1-based indexing*/
q 1 3
q 3 5
u 3 6
q 1 5


OutPut:
--------
1
1
2
1

