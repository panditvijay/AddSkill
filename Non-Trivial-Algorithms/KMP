/*


Time Complexity O(n+m)

Solution to a Problem: https://www.spoj.com/problems/NAJPF/
*/





#include<bits/stdc++.h>

#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define sp(x,y)         fixed<<setprecision(y)<<x
typedef long long int ll;

using namespace std;

void lpps(string &pat,vector<int> &lps,int m){
    
    int len =0; //length of prefix which is suffix
    lps[len]=0;
    
    for(int i=1;i<m;){
        if(pat[i]==pat[len]){
            len++;
            lps[i]=len;
            i++;
        }else{
            
            if(len!=0){
                len=lps[len-1];
            }else{
                lps[i]=0;
                i++;
            }
        }
    }
    
}


vector<int> kmp(string &txt,string &pat,vector<int> &lps,int n,int m){
    vector<int> tmp;
    
    int i=0;
    int j=0;
    
    while(i<n){
        if(txt[i]==pat[j]){
            i++;
            j++;
        }
        
        if(j==m){
            tmp.push_back(i-j);
            j=lps[j-1];
        }else if(i<n && txt[i]!=pat[j]){
            if(j!=0){
                j=lps[j-1];
            }else{
                i++;
            }
        }
    }
    
    return tmp;
}

void solve(){
    string pat,txt;
    cin>>txt>>pat;
    
    int n=txt.length();
    int m=pat.length();
    
    vector<int> lps(m);
    
    lpps(pat,lps,m); /*Create longest proper prefix which is suffix(lpps) of pattern(pat)*/
    
    vector<int> tt =kmp(txt,pat,lps,n,m);
    
    
    if(tt.size()==0){
        cout<<"Not Found"<<endl;
    }else{
    cout<<tt.size()<<endl;
    for(int i=0;i<tt.size();i++){
        cout<<tt[i]+1<<" ";
    }
        cout<<endl;
    }
    
    
}

int main(){

	// For fast I/O.
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 
    
   /* #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif */
    
   
    int t;
    cin>>t;
    
    for(int i=1;i<=t;i++){
        //cout<<"Case "<<i<<": ";
        solve();
        //cout<<"\n";
    }
   



return 0; 
}



