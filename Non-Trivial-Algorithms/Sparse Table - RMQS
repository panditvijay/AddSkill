/* Author : A110011 - 00:19 "CodeIn Hard Way" 

Trivia : LCA(Lowest Common Anccestor) can be solved using this with O(1) per query and O(NlogN) preprocessing.

LCA explanation (For more, Read Here: https://cp-algorithms.com/graph/lca.html
----------------------------------------------------------------------------
1. Do euler tour of a tree and store the level correspoding nodes
2. LCA(v1,v2) can be uniquely determined by finding the vertex with the smallest level in the Euler tour between first(v1) and first(v2).
3. To find min. level between two nodes, we can buid sparse table and get the min. value in O(1) per query as described below(Line No. 81)

Good read : https://www.hackerearth.com/practice/notes/sparse-table/#c225251

Problem Solution: https://www.spoj.com/problems/RMQSQ/
*/

#include<bits/stdc++.h>

#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define sp(x,y)         fixed<<setprecision(y)<<x
typedef long long int ll;

using namespace std;




int main(){

	// For fast I/O.
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 
    
   /* #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif */
    
    
    int n;
    cin>>n;
    
     int col = log2(n);
    
    vector<vector<int>> table(n,vector<int>(col+1,0));
    
    for(int i=0;i<n;i++){
        cin>>table[i][0];
       
    }
   
    
   
    
    for(int j=1;j<=col;j++){
        for(int i=0;i<=n-(1<<j);i++){
            table[i][j]=min(table[i][j-1],table[i+(1<<(j-1))][j-1]);
        }
    }
                            
                            
    int q;
                            
    cin>>q;
    
                            
    while(q--){
        int l,r;
        cin>>l>>r;
        
        int ans = INT_MAX;
        
        for(int i=col;i>=0;i--){
            if(l+(1<<i)-1<=r){
                ans=min(ans,table[l][i]);
                l+=(1<<i);
            }
        }
        
        /*int pre = log2(r-l+1); //Largest power of 2 possible in a given range. Using this we can answer in O(1) per query.
         ans = min(table[l][pre],table[r-pow(2,pre)+1][pre])*/
        
        
        cout<<ans<<endl;
    }
                            
                            
                            

return 0; 
}



