/* For Directed Acyclic Graph */

#include<bits/stdc++.h>

using namespace std;


void dfs(int val, vector<bool> &vst, stack<int> &st,map<int,vector<int>> &mp){
	vst[val]=true;

	for(int i=0;i<mp[val].size();i++){
		if(!vst[mp[val][i]]){
			dfs(mp[val][i],vst,st,mp);
			
		}
	}
	st.push(val);
	
}

int main(){


	int n,m;

	cin>>n>>m;

	
	map<int,vector<int>> mp;
	while(m--){
		int a,b;

		cin>>a>>b;
		mp[a].push_back(b);

	}

	cout<<"printing adjecency list"<<endl;
    
    map<int,vector<int>>::iterator it;
    
    for(it=mp.begin();it!=mp.end();it++){
        cout<<it->first<<": ";
        for(int i=0;i<it->second.size();i++){
            cout<<it->second[i]<<" ";
        }
        cout<<endl;
    }

	vector<bool> vst(n+1);

	stack<int> st;

	for(int i=1;i<vst.size();i++){
		if(!vst[i]){
			dfs(i,vst,st,mp);
			
		}
	}

cout<<"Topological sort is "<<endl;
	while(!st.empty()){
		cout<<st.top()<<" ";
		st.pop();
	}


	return 0;
}


input:
--------------------------------
10 10 // No. of vertices and edges
10 8
10 7
8 9
7 6
9 6
9 2
6 1
1 5
1 4
2 3

Output:
---------------------
printing adjecency list
1: 5 4 
2: 3 
6: 1 
7: 6 
8: 9 
9: 6 2 
10: 8 7 
Topological sort is 
10 8 9 7 6 2 3 1 4 5 
