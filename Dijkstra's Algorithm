Algorithm Steps:
---------------------

  - Set all vertices distances = infinity except for the source vertex, set the source distance = .
  - Push the source vertex in a min-priority queue in the form (distance , vertex), as the comparison in the min-priority queue will be according to vertices distances.
  - Pop the vertex with the minimum distance from the priority queue (at first the popped vertex = source).
  - Update the distances of the connected vertices to the popped vertex in case of "current vertex distance + edge weight < next vertex distance", then push the vertex
  - with the new distance to the priority queue.
  - If the popped vertex is visited before, just continue without using it.
  - Apply the same algorithm again until the priority queue is empty.


#include<bits/stdc++.h>



using namespace std;

void dij(int val,vector<bool> &vst,vector<int> &d, map<int,vector<pair<int,int>>> &mp){

	

	priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

	pq.push(make_pair(0,val));

	while(!pq.empty()){

		pair<int,int> pr = pq.top();

		int v = pr.second;

		
		pq.pop();

		if(!vst[v]){
			vst[v]=true;
			d[v]=pr.first;
		}else{
			continue;
		}

		for(int i=0;i<mp[v].size();i++){
			
				if(d[mp[v][i].second]>mp[v][i].first+pr.first){
					pq.push(make_pair(mp[v][i].first+pr.first,mp[v][i].second));
				}
			
		}
	}


}


int main(){
	ios_base::sync_with_stdio(false);
cin.tie(NULL);
	int n,m;

	cin>>n>>m;

	map<int,vector<pair<int,int>>> mp;

	while(m--){
		int a,b,w;

		cin>>a>>b>>w;

		mp[a].push_back(make_pair(w,b));
		//mp[b].push_back(make_pair(w,a));

	}

	vector<int> d(n+1,INT_MAX);

	vector<bool> vst(n+1);

	dij(1,vst,d,mp);

	for(int i=2;i<n+1;i++){
		cout<<d[i]<<" ";
	}

	return 0;
}

Input:
-------------------------
5 5 // No vertices and edges
1 2 5 (a, b, weight)
1 3 2
3 4 1
1 4 6
3 5 5

Output:
-------------------------
5 2 3 7

